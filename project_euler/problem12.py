"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

from typing import Generator


def triangular() -> Generator[int, None, None]:
    """generate the triangular numbers"""
    n = 0
    while True:
        n += 1
        yield n * (n + 1) // 2


def sieve(n: int) -> list[int]:
    """return the primes up to n"""
    primes = [True] * (n + 1)
    primes[0], primes[1] = False, False
    for i in range(2, n + 1):
        if primes[i]:
            for j in range(i * i, n + 1, i):
                primes[j] = False
    return [i for i in range(2, n + 1) if primes[i]]


def solution(num_divs: int) -> int:
    """return the first triangular number with more than num_divs divisors"""
    primes = sieve(num_divs * 2)

    def prime_factorize(n: int) -> dict[int, int]:
        """return the prime factorization of n"""
        factors: dict[int, int] = {}
        for prime in primes:
            if prime >= n:
                break
            if n % prime == 0:
                multiple = n
                while multiple % prime == 0:
                    factors[prime] = factors.get(prime, 0) + 1
                    multiple = multiple // prime

        return factors

    for triangle in triangular():
        factors = prime_factorize(triangle)
        divisors = 1
        for factor in factors.values():
            divisors *= factor + 1
        if divisors > num_divs:
            return triangle
    return -1


print(solution(500))

# 76576500 - correct
