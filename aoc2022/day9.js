"use strict";

const input = `L 1
U 1
L 1
D 2
U 2
L 2
U 2
L 2
U 2
L 1
U 1
D 1
R 2
U 1
R 2
D 1
U 1
L 1
R 1
L 1
R 2
D 1
L 2
U 2
D 2
L 1
U 1
L 2
R 2
L 1
D 2
U 2
R 1
U 2
D 1
L 1
R 1
U 2
D 2
U 2
L 1
U 2
L 2
R 2
L 1
D 1
L 1
U 2
L 2
U 2
R 1
U 1
L 2
R 1
L 2
D 2
L 2
D 2
L 2
R 2
D 1
U 2
L 2
D 2
L 1
U 1
R 2
D 1
U 2
L 1
U 2
D 2
L 1
D 1
L 1
U 2
R 2
L 2
R 1
D 2
R 2
D 2
U 1
D 2
U 2
L 2
U 1
D 2
L 1
D 2
U 2
D 2
L 1
U 2
R 2
L 2
U 1
D 2
L 1
R 1
U 2
D 2
L 1
R 1
U 1
L 2
D 2
R 1
U 1
L 2
R 2
U 1
L 3
D 2
L 1
U 3
R 3
U 1
R 3
D 3
U 2
D 2
R 1
U 2
L 1
R 3
L 1
U 1
D 2
R 1
L 1
R 2
D 2
L 3
D 2
U 2
R 1
D 1
U 1
R 3
L 2
R 1
L 1
R 1
L 1
R 2
U 1
L 2
R 2
U 3
D 2
L 3
R 1
L 1
U 3
D 1
L 3
U 2
L 1
D 3
L 2
R 3
L 2
D 1
U 2
R 3
L 3
U 2
R 2
D 3
U 2
D 2
U 1
L 1
R 1
U 3
R 1
D 2
L 3
U 2
D 1
R 1
D 3
R 1
L 1
U 3
D 1
L 3
R 1
U 2
L 2
D 1
R 2
L 3
U 3
L 1
U 1
L 1
U 3
L 2
U 1
D 2
U 2
R 3
U 1
D 2
U 1
D 2
U 3
L 1
R 2
L 2
U 3
L 2
R 3
U 1
R 3
D 3
L 2
U 2
R 1
U 1
L 3
R 1
L 1
R 1
L 1
D 3
R 2
U 1
D 3
L 3
U 3
L 1
D 2
L 3
D 3
R 4
U 2
R 2
U 3
L 2
R 3
U 1
L 1
D 1
U 1
D 4
U 4
D 2
U 2
D 3
L 4
D 2
R 1
U 1
D 3
R 3
D 3
U 3
D 1
R 3
D 1
U 3
D 4
R 3
L 2
R 1
L 3
D 1
R 4
U 4
L 1
U 4
R 4
U 3
R 4
D 4
L 3
R 1
D 3
U 2
R 4
U 1
D 4
U 2
R 2
L 4
D 4
U 2
D 1
R 4
U 2
D 1
U 3
D 2
L 2
R 3
L 1
R 2
U 4
L 3
U 1
R 4
U 2
R 3
L 2
U 4
R 1
D 1
U 4
R 1
D 3
R 1
L 1
D 3
L 4
R 2
D 4
R 2
D 1
R 1
L 4
D 3
U 1
D 4
L 4
D 2
R 2
U 1
L 1
D 1
U 3
D 4
U 3
R 5
D 2
L 3
U 4
R 1
U 5
R 3
L 5
R 2
U 4
L 3
U 3
L 4
D 4
U 3
L 1
U 2
L 5
R 2
U 5
R 5
L 4
D 2
R 4
U 1
L 5
U 4
L 3
R 5
D 5
L 5
U 2
D 1
L 3
R 5
D 1
L 4
R 1
U 4
L 3
U 3
R 2
U 3
R 4
L 2
R 3
U 4
L 3
U 5
D 3
L 2
R 1
L 1
U 4
R 5
D 3
U 2
L 5
R 4
U 1
L 5
D 5
U 5
D 5
U 3
L 3
R 3
L 1
U 2
D 4
R 4
L 1
D 3
R 5
D 3
R 4
D 5
L 4
D 2
U 1
L 5
U 4
L 4
R 1
D 2
L 5
R 2
U 4
R 5
L 1
D 3
L 4
U 3
L 3
U 1
D 1
R 1
D 1
U 3
D 1
L 5
D 2
R 1
D 1
L 5
U 2
L 4
D 5
U 1
R 5
U 6
D 3
U 1
R 6
D 6
L 3
U 4
D 2
U 3
L 2
U 2
L 4
D 5
U 3
D 1
R 6
L 6
R 5
U 1
R 1
L 1
U 1
R 4
U 2
D 5
L 6
D 6
U 5
L 2
D 3
R 2
U 6
L 6
D 1
L 3
U 6
L 2
U 4
R 4
D 5
R 3
D 5
R 3
D 4
R 3
D 3
U 5
D 2
U 6
R 1
L 2
R 5
L 2
U 2
D 6
R 5
U 2
D 1
L 1
D 3
U 5
D 2
R 4
D 6
L 4
R 1
U 4
L 6
D 6
L 4
D 1
L 4
R 1
D 1
U 3
L 6
D 2
U 5
R 3
U 2
R 5
L 3
U 5
L 4
U 1
R 5
D 3
L 6
U 1
L 6
U 1
L 5
D 5
L 4
D 5
U 3
R 3
D 3
L 2
R 2
D 4
U 5
L 1
U 6
D 6
U 1
D 3
L 4
R 6
D 4
L 3
R 5
U 1
L 1
R 3
L 2
D 4
L 4
D 6
L 2
D 5
L 1
R 4
U 3
L 1
D 7
U 5
D 2
R 6
L 1
U 3
L 2
R 1
U 6
L 3
D 2
R 4
D 2
U 2
L 5
U 7
D 7
U 3
L 5
R 5
U 6
D 1
L 6
U 7
D 5
U 6
R 4
U 5
D 1
L 5
U 5
R 1
U 3
L 4
D 4
L 5
U 1
R 5
U 3
L 3
R 1
U 6
L 3
D 3
R 4
L 1
R 6
D 4
L 1
R 6
L 4
U 4
R 4
L 1
R 6
L 4
D 3
R 4
L 7
D 1
R 6
D 5
L 2
U 2
D 5
U 3
R 2
D 3
R 6
L 5
R 4
L 1
D 7
U 7
R 3
D 3
R 2
U 3
R 1
D 5
U 5
R 4
L 6
R 6
U 4
R 2
L 3
U 5
R 2
L 5
D 6
L 3
U 6
R 7
U 5
R 1
L 6
D 2
R 1
D 1
R 2
D 3
U 2
D 1
U 1
D 6
R 2
U 5
L 5
D 2
R 7
D 7
U 8
D 3
L 1
U 6
R 8
D 6
U 5
R 2
L 5
R 7
D 8
U 4
R 8
D 8
R 4
L 4
U 2
R 6
U 4
R 7
D 6
L 8
R 8
L 7
D 2
L 3
D 3
R 7
D 8
U 4
R 8
U 8
L 2
D 2
L 6
U 2
L 8
R 3
L 1
D 6
U 4
R 3
U 4
D 1
U 5
D 5
U 2
L 8
U 3
R 6
L 1
R 2
U 3
D 2
L 5
U 2
L 8
U 4
L 1
R 7
D 6
L 5
D 7
R 7
U 8
R 3
U 1
D 5
L 8
D 6
L 1
R 8
L 6
U 7
R 5
L 7
R 6
D 3
R 7
D 6
U 5
R 6
D 2
U 8
L 4
D 1
R 5
D 8
L 7
U 4
R 6
L 5
U 1
D 3
L 7
R 2
U 9
L 3
U 7
R 6
L 1
U 2
R 8
U 4
R 3
L 7
U 3
L 1
D 2
R 1
U 2
L 9
R 3
D 1
L 7
U 2
D 1
L 5
R 9
U 1
D 1
U 4
R 9
U 7
L 5
R 7
L 7
R 6
D 6
R 3
D 4
R 9
U 3
R 6
L 8
U 4
L 5
R 2
L 1
R 9
L 2
U 8
D 5
R 7
D 7
L 9
D 6
U 2
R 6
L 5
D 5
U 7
R 6
L 6
U 1
R 9
U 8
D 6
R 9
D 7
R 8
D 7
R 4
D 9
L 2
R 7
L 3
D 7
U 3
L 7
D 4
R 4
L 5
R 7
U 6
L 5
D 9
U 8
L 1
D 8
U 1
L 2
U 6
L 3
D 6
R 3
L 1
U 3
D 5
U 9
R 3
U 7
L 5
D 3
L 8
U 9
L 7
U 4
R 7
L 3
R 7
L 4
D 4
L 5
R 2
L 2
U 2
D 1
R 2
D 5
R 10
U 5
D 6
R 4
L 8
U 8
R 6
L 1
U 4
L 5
D 8
R 7
L 4
D 4
U 6
L 6
U 3
R 10
D 7
U 6
D 3
R 8
L 2
U 5
L 2
D 8
R 3
L 6
U 2
D 1
U 7
R 3
U 7
L 7
R 8
D 3
R 9
U 5
R 6
D 3
L 4
R 5
U 4
L 7
U 5
R 7
D 2
R 4
D 4
L 6
D 9
R 2
L 3
U 10
R 2
D 5
U 8
L 3
R 6
L 5
U 5
L 5
D 5
L 3
D 4
U 8
R 2
L 9
D 8
U 9
L 7
U 5
D 3
L 9
R 2
U 6
D 5
U 4
D 3
L 9
D 7
U 8
R 6
L 5
D 2
U 5
R 2
D 9
U 9
D 9
L 7
D 5
R 1
U 9
L 6
U 5
L 7
D 8
U 7
L 9
D 3
R 9
U 2
D 8
L 2
D 9
R 8
U 6
D 10
R 7
D 3
U 5
R 8
D 10
R 3
L 2
R 5
U 5
D 11
L 5
D 4
R 8
L 7
R 4
L 6
U 6
L 5
U 9
R 10
D 1
L 2
U 9
L 2
U 4
R 1
L 11
D 8
R 9
D 5
R 11
L 10
R 2
U 7
D 9
U 4
L 10
U 8
D 2
L 4
U 11
R 5
U 8
L 7
D 5
L 10
R 8
L 11
U 10
L 5
U 6
L 8
U 9
L 1
U 2
D 10
U 6
R 4
U 7
L 8
D 5
U 1
D 2
L 2
U 5
L 2
U 11
D 10
L 8
U 2
L 8
R 6
U 5
R 7
L 1
D 10
L 10
U 4
R 8
D 2
R 4
U 7
L 8
D 8
U 2
L 5
U 3
D 4
L 7
R 8
D 11
U 1
D 5
R 10
D 2
U 11
R 1
D 3
L 3
R 11
L 9
D 11
L 10
U 1
R 9
U 9
L 8
U 5
D 11
U 9
R 7
D 8
R 4
U 5
D 11
L 8
D 3
R 7
L 2
D 3
R 7
L 3
U 3
D 1
U 6
L 7
U 8
D 4
L 12
D 5
U 4
D 5
U 2
R 9
L 6
R 2
D 3
U 1
R 11
U 3
R 4
D 10
R 3
L 8
U 11
L 2
U 6
R 12
D 7
L 2
D 7
L 12
D 9
R 11
D 6
R 4
L 4
D 6
R 11
L 9
D 3
R 2
L 12
D 6
R 7
L 7
D 5
L 6
R 2
U 1
D 6
R 6
L 12
R 8
U 9
L 2
U 7
R 9
D 9
U 4
D 3
R 10
L 1
D 10
R 9
U 5
L 2
D 7
R 10
U 12
D 11
U 11
L 8
R 5
L 11
U 3
D 8
U 11
D 2
R 2
D 2
U 3
D 8
U 2
D 11
L 1
D 11
U 11
L 7
D 6
U 5
D 7
R 12
U 3
D 5
R 8
D 4
L 2
U 11
R 12
D 1
R 13
D 12
R 3
D 7
R 1
U 4
L 9
U 3
D 12
L 4
D 6
L 9
D 8
R 5
L 4
R 3
D 1
U 8
R 8
D 7
L 8
R 8
U 6
R 5
L 8
U 4
D 11
R 3
U 12
D 8
L 13
U 3
L 5
U 2
L 9
R 7
U 11
D 10
R 6
L 2
D 6
R 9
U 13
L 13
D 5
U 11
L 10
U 9
L 8
D 7
R 4
L 7
D 13
U 9
D 9
U 12
R 9
U 1
D 7
L 2
D 6
R 1
U 4
R 6
U 9
L 8
U 10
L 2
U 5
R 4
D 9
L 12
U 8
L 2
D 9
U 4
R 1
D 5
R 11
U 10
D 12
R 2
U 6
R 4
U 5
R 5
L 12
R 10
D 9
L 11
D 10
R 2
U 4
R 5
L 4
U 10
D 10
U 2
L 4
R 7
D 12
U 8
L 8
D 12
R 7
L 13
D 12
R 11
U 13
L 11
U 5
D 11
U 2
D 14
U 7
R 1
D 10
R 10
D 13
R 3
D 13
U 2
L 13
U 9
D 13
L 7
D 3
L 4
R 1
D 11
U 1
D 7
L 1
U 1
R 6
D 14
L 11
U 13
D 10
L 3
R 11
L 3
D 10
L 11
U 4
L 13
U 13
D 12
R 5
D 1
U 14
D 3
U 4
D 5
L 3
D 2
R 3
U 8
D 5
U 13
R 11
L 10
R 13
L 6
U 10
R 2
U 9
D 12
L 7
D 8
U 4
D 7
L 5
U 10
D 10
R 6
L 14
D 11
U 13
D 13
U 10
L 1
U 2
L 14
U 2
R 2
D 12
R 2
L 12
U 1
D 13
R 12
L 9
U 5
D 11
L 7
R 3
U 2
L 4
U 8
L 10
D 13
L 2
U 7
L 8
R 1
U 3
L 14
U 11
L 3
U 11
L 7
R 13
U 13
L 4
U 12
R 2
L 8
D 10
L 7
U 10
R 2
L 4
D 14
R 11
D 4
L 4
R 6
L 3
R 5
U 5
L 9
R 9
L 3
R 14
U 10
D 8
U 5
L 9
R 15
L 1
R 4
U 9
R 9
D 10
L 7
D 15
U 12
L 4
U 10
D 14
R 11
D 5
U 14
L 8
R 2
U 13
D 5
L 2
U 15
R 11
L 1
U 5
D 4
R 4
D 10
U 13
L 12
R 2
U 4
L 13
R 4
U 4
R 14
D 10
R 11
D 7
U 12
L 4
U 11
D 6
R 1
D 5
L 12
R 7
L 3
U 11
R 15
D 1
R 2
L 6
U 7
L 5
R 4
D 3
R 13
L 12
R 15
L 15
U 14
D 8
U 1
D 14
U 14
L 2
D 1
R 4
L 14
R 11
U 11
L 10
D 10
R 13
U 11
L 7
R 4
U 14
L 2
D 15
R 11
D 11
L 13
R 13
D 2
R 4
U 5
L 14
D 9
R 11
D 4
U 6
D 13
R 11
D 6
L 14
D 13
L 7
U 7
L 8
D 7
L 15
D 7
R 11
U 6
L 10
U 4
R 12
L 2
D 10
L 14
R 15
D 1
U 15
L 11
D 5
L 11
D 6
U 7
L 14
R 8
U 1
R 4
D 2
R 3
L 6
U 8
L 15
U 16
L 9
R 16
U 6
L 7
U 3
R 13
L 6
U 14
L 13
R 2
U 10
R 4
U 6
D 7
R 16
U 16
L 14
D 6
U 1
D 16
L 10
D 7
L 16
D 12
R 13
U 15
R 2
U 15
D 2
L 14
R 13
L 1
U 10
D 10
L 2
D 6
L 14
D 15
U 1
D 10
L 10
D 5
L 10
R 14
U 1
R 7
L 3
R 9
U 10
D 2
R 5
D 9
U 15
D 4
U 16
D 14
R 9
D 13
R 16
D 14
L 12
R 16
D 2
L 7
D 4
U 5
L 10
R 11
L 2
R 1
U 4
R 2
L 12
D 7
U 12
L 2
U 7
L 12
U 1
R 3
U 9
D 1
U 13
R 17
U 12
R 3
D 10
R 6
L 14
U 5
D 3
U 4
D 11
U 7
L 15
U 14
L 1
U 10
R 1
L 9
U 12
R 15
D 11
R 3
L 15
U 7
R 12
U 7
D 10
R 17
D 13
L 7
U 9
R 14
L 16
R 3
U 5
L 10
D 16
L 7
U 11
R 7
L 8
D 4
L 6
D 6
U 17
D 6
R 14
D 4
R 17
U 4
L 17
D 5
R 16
U 10
R 11
D 7
R 14
D 14
L 2
R 11
L 16
D 14
R 4
L 7
D 15
R 13
U 8
L 12
R 4
U 16
D 2
U 10
D 2
U 1
L 5
U 4
L 17
R 11
D 9
L 2
U 12
R 3
D 3
L 10
R 2
D 2
L 4
R 14
U 3
R 16
L 11
U 1
L 15
R 9
U 7
L 12
U 10
L 2
U 3
R 8
L 13
R 4
D 3
U 10
D 12
R 7
U 12
R 9
L 18
D 4
U 16
R 7
U 13
D 10
R 13
U 12
R 8
D 16
R 4
L 3
D 13
U 11
D 7
L 3
R 10
L 16
D 4
L 15
U 13
R 15
L 6
R 14
D 8
R 16
D 10
U 10
L 12
D 17
R 10
L 4
R 4
U 8
R 1
U 13
D 17
L 4
D 3
U 3
L 8
D 3
U 12
D 2
U 11
L 15
R 11
L 14
U 5
D 6
L 17
U 18
R 1
U 2
R 15
U 8
L 9
U 16
L 7
D 9
L 8
U 4
D 3
L 6
U 10
L 14
R 17
L 16
U 15
R 5
D 2
U 8
L 8
U 11
D 6
L 14
U 2
D 3
R 10
U 2
D 16
U 2
D 1
L 12
R 4
L 13
D 15
U 6
R 11
U 5
L 7
D 15
R 2
D 9
R 16
U 1
L 12
U 6
D 3
U 3
L 6
U 11
R 4
L 11
R 12
U 14
L 13
D 13
L 5
U 19
D 11
L 14
U 12
D 1
R 15
L 17
U 6
R 3
U 11
D 11
U 14
R 3
L 10
D 11
L 8
U 18
L 7
R 6
U 4
D 7
L 4
R 12
U 2
R 17
U 2
L 9
R 18
U 13
L 14
D 16
U 3
D 8
U 17
D 15
L 13
R 6
D 13
U 17
L 19
U 3
L 2
D 14
R 13
D 13
L 7
R 12
D 7
U 8
D 4
U 13
D 11
U 2
D 6
L 1
D 19
L 9
D 5
R 11
U 19
L 11
D 3
R 3
U 6
D 18
U 17
D 12
R 13
U 18
R 14
L 10
R 15
L 1
U 14
L 19
D 1
U 13
L 4
R 6
D 10
R 6
D 6
L 15
D 8
L 8
U 3
D 14
U 5
L 4
U 14
R 3
U 16
R 5
L 18
R 16
D 13
U 9
R 14
L 2
D 12
R 5
U 17
R 9
L 11
D 8
L 8
D 8
U 6
R 16
L 5
D 14`;

const test = `R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2`;

// 1 + 2 + 2 + 2 + 2  = 9 unique squares for the first 5 lines, we just repeat that with different orientations
const test2 = `R 3
U 3
L 3
D 3

L 3
D 3
R 3
U 3

U 3
L 3
D 3
R 3

R 3
D 3
L 3
U 3

L 3
U 4
D 8
U 4
R 6
U 4
D 8`; // the 1 moves bring the tail back to origin
// this should be 17 unique squares since origin is shared
// should now be 17 + 4 = 21 unique squares since 5 squares are shared
// should now be 21 + 4 = 25 unique squares since 5 squares are shared

// ok we don't even need a 2d array or some sort of data structure to represent the grid
// we just use a pair of ints for each and some sort of set to keep track of the visited points

const head = { x: 0, y: 0 };
const tail = { x: 0, y: 0 };

const visited = new Set();
visited.add(`${tail.x},${tail.y}`);

function renderBoard(head, tail) {
	for (let i = 10; i > -10; i--) {
		for (let j = -10; j < 10; j++) {
			if (i === tail.y && j === tail.x) {
				process.stdout.write("T");
			} else if (i === head.y && j === head.x) {
				process.stdout.write("H");
			} else if (visited.has(`${j},${i}`)) {
				process.stdout.write("X");
			} else {
				process.stdout.write(".");
			}
		}
		process.stdout.write("\n");
	}
	process.stdout.write("====================================\n");
}

// input
// 	.split("\n")
// 	.map((line) => line.split(" "))
// 	// .filter((line) => line.length > 1) // for breaking up the test cases with new lines
// 	.map(([dir, times]) => {
// 		// console.log(dir, times);
// 		for (let i = 0; i < parseInt(times); i++) {
// 			switch (dir) {
// 				case "R":
// 					head.x++;
// 					break;
// 				case "L":
// 					head.x--;
// 					break;
// 				case "U":
// 					head.y++;
// 					break;
// 				case "D":
// 					head.y--;
// 					break;
// 			}

// 			const radius = (x, y) => {
// 				if (x === head.x && y === head.y) {
// 					return true;
// 				}
// 				for (let i = -1; i < 2; i++) {
// 					for (let j = -1; j < 2; j++) {
// 						if (x + i === head.x && y + j === head.y) {
// 							return true;
// 						}
// 					}
// 				}
// 			};

// 			const dist = (x, y) => Math.abs(head.x - x) + Math.abs(head.y - y);

// 			if (radius(tail.x, tail.y)) {
// 			} else {
// 				let closest = Infinity;
// 				const move = [0, 0];
// 				for (let i = -1; i < 2; i++) {
// 					for (let j = -1; j < 2; j++) {
// 						if (radius(tail.x + i, tail.y + j)) {
// 							if (dist(tail.x + i, tail.y + j) < closest) {
// 								closest = dist(tail.x + i, tail.y + j);
// 								move[0] = i;
// 								move[1] = j;
// 								if (closest === 1) break;
// 							}
// 						}
// 					}
// 				}
// 				tail.x += move[0];
// 				tail.y += move[1];
// 				visited.add(`${tail.x},${tail.y}`);
// 			}
// 			// console.log(head, tail, visited.size);
// 			// renderBoard(head, tail);
// 			if (dist(tail.x, tail.y) > 2) {
// 				throw new Error("too far");
// 			}
// 		}
// 	});

// ive run into the very annoying problem of having the test case work but not the actual input

/* I'm gonna leave the code there
 * Let's try a test set that has all the possible moves the tail could make
 * this is crazy. its not even the case that there's another thing with a closest distance of 1
 * and if we don't have a closest of 1 we'll never have 2 closests of 2 so it can't be selecting the wrong square
 * nvm i figured it out
 * off by one error, we're adding to visited at before we move the tail
 */

// console.log(visited.size);

// part 2

const test3 = `R 5
U 8
L 8
D 3
R 17
D 10
L 25
U 20`;

class Point {
	constructor() {
		this.x = 0;
		this.y = 0;
	}
}
// cdr 0 will be head, 9 will be tail
const cdr = [];
for (let i = 0; i < 10; i++) {
	cdr.push(new Point());
}
const visited2 = new Set();
visited.add(`${cdr[9].x},${cdr[9].y}`);

input
	.split("\n")
	.map((line) => line.split(" "))
	.map(([dir, times]) => {
		// console.log(dir, times);
		for (let i = 0; i < parseInt(times); i++) {
			switch (dir) {
				case "R":
					cdr[0].x++;
					break;
				case "L":
					cdr[0].x--;
					break;
				case "U":
					cdr[0].y++;
					break;
				case "D":
					cdr[0].y--;
					break;
			}

			const radius = (x, y, predecessor) => {
				if (x === predecessor.x && y === predecessor.y) {
					return true;
				}
				for (let i = -1; i < 2; i++) {
					for (let j = -1; j < 2; j++) {
						if (
							x + i === predecessor.x &&
							y + j === predecessor.y
						) {
							return true;
						}
					}
				}
			};

			const dist = (x, y, predecessor) =>
				Math.abs(predecessor.x - x) + Math.abs(predecessor.y - y);

			for (let link = 1; link < 10; link++) {
				if (radius(cdr[link].x, cdr[link].y, cdr[link - 1])) {
				} else {
					let closest = Infinity;
					const move = [0, 0];
					for (let i = -1; i < 2; i++) {
						for (let j = -1; j < 2; j++) {
							if (
								radius(
									cdr[link].x + i,
									cdr[link].y + j,
									cdr[link - 1]
								)
							) {
								if (
									dist(
										cdr[link].x + i,
										cdr[link].y + j,
										cdr[link - 1]
									) < closest
								) {
									closest = dist(
										cdr[link].x + i,
										cdr[link].y + j,
										cdr[link - 1]
									);
									move[0] = i;
									move[1] = j;
									if (closest === 1) break;
								}
							}
						}
					}
					cdr[link].x += move[0];
					cdr[link].y += move[1];
				}
				// console.log(head, tail, visited.size);
				// renderBoard(head, tail);
			}
			visited2.add(`${cdr[9].x},${cdr[9].y}`);
		}
	});

console.log(visited2.size);
